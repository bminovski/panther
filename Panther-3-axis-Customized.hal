# #######################################
#
# HAL file for BeagleBone + BeBoPr cape with 4 steppers
#
# Derived from example hm2-stepper config
#
# ########################################

# Launch the setup script to make sure hardware setup looks good
loadusr -w ./setup.bridge.sh


# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics
loadrt trivkins

# motion controller, get name and thread periods from ini file
# trajectory planner
loadrt tp
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES tp=tp kins=trivkins


# load low-level drivers
loadrt hal_bb_gpio output_pins=916,914,819,813 input_pins=911,913,915,817,923,925,927,926,924,826,912,815,942,818,922,921
loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG) halname=hpg
#loadrt pid count=2
loadrt limit1 count=2


# Python user-mode HAL module to read ADC value and generate a thermostat output for PWM
# c = analog input channel and thermistor table
# loadusr -Wn Therm hal_temp_bbb -n Therm -c 04:epcos_B57560G1104,05:epcos_B57560G1104 -b CRAMPS

# ################################################
# THREADS
# ################################################

addf hpg.capture-position   servo-thread
addf bb_gpio.read                         servo-thread
addf motion-command-handler               servo-thread
addf motion-controller                    servo-thread
#addf pid.0.do-pid-calcs                   servo-thread
#addf pid.1.do-pid-calcs                   servo-thread
addf limit1.0                             servo-thread
addf limit1.1                             servo-thread
addf hpg.update             servo-thread
addf bb_gpio.write                        servo-thread


# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################


# ################
# A [3] Axis
# ################

# axis enable chain
newsig emcmot.03.enable bit
sets emcmot.03.enable FALSE

net emcmot.03.enable <= axis.3.amp-enable-out 
net emcmot.03.enable => hpg.stepgen.03.enable


# position command and feedback
net emcmot.03.pos-cmd <= axis.3.motor-pos-cmd
net emcmot.03.pos-cmd => hpg.stepgen.03.position-cmd

net motor.03.pos-fb <= hpg.stepgen.03.position-fb
net motor.03.pos-fb => axis.3.motor-pos-fb


# timing parameters
setp hpg.stepgen.03.dirsetup        [AXIS_3]DIRSETUP
setp hpg.stepgen.03.dirhold         [AXIS_3]DIRHOLD

setp hpg.stepgen.03.steplen         [AXIS_3]STEPLEN
setp hpg.stepgen.03.stepspace       [AXIS_3]STEPSPACE

setp hpg.stepgen.03.position-scale  [AXIS_3]SCALE

setp hpg.stepgen.03.maxvel          [AXIS_3]STEPGEN_MAX_VEL
setp hpg.stepgen.03.maxaccel        [AXIS_3]STEPGEN_MAX_ACC

#setp hpg.stepgen.03.step_type       0
# P8.9
setp hpg.stepgen.03.steppin          0x65
# P8.7 
setp hpg.stepgen.03.dirpin           0x62


# ################
# C [5] Axis
# ################

# axis enable chain
newsig emcmot.05.enable bit
sets emcmot.05.enable FALSE

net emcmot.05.enable <= axis.5.amp-enable-out 
net emcmot.05.enable => hpg.stepgen.05.enable


# position command and feedback
net emcmot.05.pos-cmd <= axis.5.motor-pos-cmd
net emcmot.05.pos-cmd => hpg.stepgen.05.position-cmd

net motor.05.pos-fb <= hpg.stepgen.05.position-fb
net motor.05.pos-fb => axis.5.motor-pos-fb


# timing parameters
setp hpg.stepgen.05.dirsetup        [AXIS_5]DIRSETUP
setp hpg.stepgen.05.dirhold         [AXIS_5]DIRHOLD

setp hpg.stepgen.05.steplen         [AXIS_5]STEPLEN
setp hpg.stepgen.05.stepspace       [AXIS_5]STEPSPACE

setp hpg.stepgen.05.position-scale  [AXIS_5]SCALE

setp hpg.stepgen.05.maxvel          [AXIS_5]STEPGEN_MAX_VEL
setp hpg.stepgen.05.maxaccel        [AXIS_5]STEPGEN_MAX_ACC

#setp hpg.stepgen.05.step_type       0
# P8.8
setp hpg.stepgen.05.steppin          0x63
# P8.10
setp hpg.stepgen.05.dirpin           0x64


# ################
# V [7] Axis
# ################

# axis enable chain
newsig emcmot.07.enable bit
sets emcmot.07.enable FALSE

net emcmot.07.enable <= axis.7.amp-enable-out 
net emcmot.07.enable => hpg.stepgen.07.enable


# position command and feedback
net emcmot.07.pos-cmd <= axis.7.motor-pos-cmd
net emcmot.07.pos-cmd => hpg.stepgen.07.position-cmd

net motor.07.pos-fb <= hpg.stepgen.07.position-fb
net motor.07.pos-fb => axis.7.motor-pos-fb


# timing parameters
setp hpg.stepgen.07.dirsetup        [AXIS_7]DIRSETUP
setp hpg.stepgen.07.dirhold         [AXIS_7]DIRHOLD

setp hpg.stepgen.07.steplen         [AXIS_7]STEPLEN
setp hpg.stepgen.07.stepspace       [AXIS_7]STEPSPACE

setp hpg.stepgen.07.position-scale  [AXIS_7]SCALE

setp hpg.stepgen.07.maxvel          [AXIS_7]STEPGEN_MAX_VEL
setp hpg.stepgen.07.maxaccel        [AXIS_7]STEPGEN_MAX_ACC

#setp hpg.stepgen.07.step_type       0
# P8.12
setp hpg.stepgen.07.steppin          0x4C
# P8.11
setp hpg.stepgen.07.dirpin           0x4D


# ################
# A [3] Axis
# ################

# axis enable chain
# newsig emcmot.03.enable bit
# sets emcmot.03.enable FALSE

# net emcmot.03.enable <= axis.3.amp-enable-out 
# net emcmot.03.enable => hpg.stepgen.03.enable


# position command and feedback
# net emcmot.03.pos-cmd <= axis.3.motor-pos-cmd
# net emcmot.03.pos-cmd => hpg.stepgen.03.position-cmd

# net motor.03.pos-fb <= hpg.stepgen.03.position-fb
# net motor.03.pos-fb => axis.3.motor-pos-fb


# timing parameters
# setp hpg.stepgen.03.dirsetup        [AXIS_3]DIRSETUP
# setp hpg.stepgen.03.dirhold         [AXIS_3]DIRHOLD

# setp hpg.stepgen.03.steplen         [AXIS_3]STEPLEN
# setp hpg.stepgen.03.stepspace       [AXIS_3]STEPSPACE

# setp hpg.stepgen.03.position-scale  [AXIS_3]SCALE

# setp hpg.stepgen.03.maxvel          [AXIS_3]STEPGEN_MAX_VEL
# setp hpg.stepgen.03.maxaccel        [AXIS_3]STEPGEN_MAX_ACC

#setp hpg.stepgen.03.step_type       0
# P8.14
# setp hpg.stepgen.03.steppin          0x3A
# P8.16
# setp hpg.stepgen.03.dirpin           0x4E


# ##################################################
# Standard I/O - EStop, Enables, Limit Switches, Etc
# ##################################################

# Standard inputs
net in0 bb_gpio.p9.in-24 => motion.digital-in-00
net in1 bb_gpio.p8.in-26 => motion.digital-in-01
net in2 bb_gpio.p9.in-12 => motion.digital-in-02
net in3 bb_gpio.p8.in-15 => motion.digital-in-03

#Spindle control
net spindle-enable motion.spindle-on => bb_gpio.p8.out-13
setp bb_gpio.p8.out-13.invert 1

# Standard outputs
#net out0 motion.digital-out-00 => bb_gpio.p8.out-13
net out1 motion.digital-out-01 => bb_gpio.p8.out-19
net out2 motion.digital-out-02 => bb_gpio.p9.out-14
net out3 motion.digital-out-03 => bb_gpio.p9.out-16

# create a signal for the estop loopback
# net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in
net estop bb_gpio.p9.in-26 => iocontrol.0.emc-enable-in

# invert estop input signal
setp bb_gpio.p9.in-26.invert 1

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed


#setp hpg.pwmgen.00.pwm_period       10000000

# home switches

# invert the home input signals
setp bb_gpio.p9.in-11.invert 1
setp bb_gpio.p9.in-13.invert 1
setp bb_gpio.p9.in-15.invert 1
# setp bb_gpio.p8.in-17.invert 1

# wire the home inputs
net Ahome bb_gpio.p9.in-11 => axis.3.home-sw-in
net Chome bb_gpio.p9.in-13 => axis.5.home-sw-in
net Vhome bb_gpio.p9.in-15 => axis.7.home-sw-in
# net Ahome bb_gpio.p8.in-17 => axis.3.home-sw-in
